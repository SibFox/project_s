unit UnitDraw;

interface

uses
  UnitBuffer, Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Math;

type
  TCmdCursor = Record
    color_bg : array[0..1] of TColor;
    color_fg : array[0..1] of TColor;
    height : array[0..1] of TColor;
    phase : integer;
    x, y : integer;
  end;
  TCmdColorScheme = Record
    colors_bg : array[0.._LastColorInScheme] of TColor;
    colors_fg : array[0.._LastColorInScheme] of TColor;
  end;

var
  cur : TCmdCursor;
  CurColorScheme : TCmdColorScheme;
  colorscoll_bg : array[0.._LastColorInScheme] of TColor = (clBlack);
  colorscoll_fg : array[0.._LastColorInScheme] of TColor = (clGray);
  delta_stry : integer = 3;

  procedure Cursor_Init(canv : TCanvas);
  procedure Cursor_SetPos(canv : TCanvas; y, x : int64);
  procedure Cursor_Flash;
  procedure Cursor_Draw(canv : TCanvas; phase : integer);
  procedure DrawBuffer(var buffnum : integer; var img : TImage; start_x, start_y : int64);

implementation

uses
  UnitMain;

//+ Drawing 1
  function GetTextWidth(canv : TCanvas) : integer;
  begin
    result := canv.TextWidth('W') + 1;
  end;

  function GetTextHeight(canv : TCanvas) : integer;
  begin
    result := -canv.Font.Height + delta_stry;
  end;

  procedure DrawBuffer(var buffnum : integer; var img : TImage; start_x, start_y : int64);
  var
    i, j : int64;
  begin
    img.Canvas.Brush.Color := CurColorScheme.colors_bg[0];
    img.Canvas.Pen.Color := CurColorScheme.colors_bg[0];
    img.Canvas.Rectangle(0, 0, img.Width, img.Height);
    i := start_y;
    while (i < UnitBuffer.buffs[buffnum].len_y) and (i <= (img.Height div GetTextHeight(img.Canvas)) + 1) do begin
      j := start_x;
      while (j < UnitBuffer.buffs[buffnum].len_x[i]) and (j <= (img.Width div GetTextWidth(img.Canvas)) + 1) do begin
        img.Canvas.Font.Color := CurColorScheme.colors_fg[UnitBuffer.buffs[buffnum].symbols[i][j].color_fg];
        img.Canvas.Brush.Color := CurColorScheme.colors_bg[UnitBuffer.buffs[buffnum].symbols[i][j].color_bg];
        img.Canvas.TextOut((j - start_x) * GetTextWidth(img.Canvas),  (i - start_y) * (-img.Canvas.Font.Height + delta_stry), UnitBuffer.buffs[buffnum].symbols[i][j].symb);
        inc(j);
      end;
      inc(i);
    end;
  end;

  //+ Cursor
    procedure Cursor_Init(canv : TCanvas);
    begin
      cur.color_bg[0] := clNone;
      cur.color_fg[0] := clNone;
      cur.color_fg[1] := clGreen;
      cur.color_bg[1] := clGreen;
      cur.x := 0;
      cur.y := 0;
      cur.height[0] := canv.Font.Size;
      cur.height[1] := Max(GetTextHeight(canv) div 6, 2);
      cur.phase := 1;
    end;

    procedure Cursor_ReInit(canv : TCanvas);
    begin
      cur.height[0] := canv.Font.Size;
      cur.height[1] := Max(GetTextHeight(canv) div 6, 2);
      cur.phase := 1;
    end;

    procedure Cursor_Flash;
    begin
      if cur.phase mod 2 = 0 then begin
        inc(cur.phase)
      end else begin
        dec(cur.phase);
      end;
    end;

    procedure Cursor_SetPos(canv : TCanvas; y, x : int64);
    begin
      FormMain.Timer_CursorUpd.Enabled := false;
      Cursor_Draw(canv, 0);
      cur.x := x;
      cur.y := y;
      cur.phase := 1;
      Cursor_Draw(canv, 1);
      FormMain.Timer_CursorUpd.Enabled := true;
    end;

    procedure Cursor_Draw(canv : TCanvas; phase : integer);
    begin
      FormMain.ImgCmd.Canvas.Brush.Color := cur.color_bg[phase];
      FormMain.ImgCmd.Canvas.Pen.Color := cur.color_fg[phase];
      FormMain.ImgCmd.Canvas.Rectangle(
        GetTextWidth(canv) * cur.x,
        (GetTextHeight(canv)) * (cur.y + 1) - cur.height[phase],
        GetTextWidth(canv) * (cur.x + 1),
        (GetTextHeight(canv)) * (cur.y + 1)
      );
      FormMain.ImgCmd.Refresh;
    end;
  //-
//-

//+ Initialise
  procedure Init_1();
  begin
    CurColorScheme.colors_bg[0] := clBlack;
    CurColorScheme.colors_fg[0] := clGray;
  end;
//-

begin
  Init_1();
end.
